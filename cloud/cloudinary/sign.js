// Generated by CoffeeScript 1.6.3
(function() {
  var GLOBAL, api_sign_request, build_array, build_custom_headers, build_eager, build_upload_params, config, generate_transformation_string, get_api_url, identifier_pattern, option_consume, present, sha1, sign_request, timestamp, _;

  GLOBAL = Parse.Cloudinary != null ? Parse.Cloudinary : Parse.Cloudinary = {};

  _ = GLOBAL.require("lib/underscore");

  sha1 = GLOBAL.require("lib/crypto/sha1");

  config = GLOBAL.require("config");

  exports.sign_upload_request = function(params) {
    params = build_upload_params(params);
    params.signature = sign_request(params);
    params.api_key = config().api_key;
    if (params.api_key == null) {
      throw "Must supply api_key";
    }
    return params;
  };

  identifier_pattern = /^(?:([^\/]+)\/)??(?:([^\/]+)\/)??(?:v(\d+)\/)?(?:([^#\/]+?)(?:\.([^.#\/]+))?)(?:#([^\/]+))?$/;

  exports.verify_upload = function(identifier) {
    var expected_signature, format, image_type, match, public_id, resource_type, signature, version, _ref;
    _ref = identifier.match(identifier_pattern) || [], match = _ref[0], resource_type = _ref[1], image_type = _ref[2], version = _ref[3], public_id = _ref[4], format = _ref[5], signature = _ref[6];
    expected_signature = sign_request({
      public_id: public_id,
      version: version
    });
    console.log('Signing ');
    console.log({
      public_id: public_id,
      version: version,
      expected: expected_signature,
      given: signature
    });
    return expected_signature === signature;
  };

  exports.remove_signature = function(identifier) {
    return identifier.replace(/#.*$/, '');
  };

  sign_request = function(params) {
    var api_secret, k, v;
    for (k in params) {
      v = params[k];
      if (!present(v)) {
        delete params[k];
      }
    }
    api_secret = config().api_secret;
    if (api_secret == null) {
      throw "Must supply api_secret";
    }
    return api_sign_request(params, api_secret);
  };

  get_api_url = function(action, options) {
    var cloud_name, cloudinary, resource_type, _ref, _ref1, _ref2, _ref3;
    if (action == null) {
      action = 'upload';
    }
    if (options == null) {
      options = {};
    }
    cloudinary = (_ref = (_ref1 = options["upload_prefix"]) != null ? _ref1 : config().upload_prefix) != null ? _ref : "https://api.cloudinary.com";
    cloud_name = (function() {
      var _ref3;
      if ((_ref2 = (_ref3 = options["cloud_name"]) != null ? _ref3 : config().cloud_name) != null) {
        return _ref2;
      } else {
        throw "Must supply cloud_name";
      }
    })();
    resource_type = (_ref3 = options["resource_type"]) != null ? _ref3 : "image";
    return [cloudinary, "v1_1", cloud_name, resource_type, action].join("/");
  };

  api_sign_request = function(params_to_sign, api_secret) {
    var k, to_sign, v;
    to_sign = _.sortBy((function() {
      var _results;
      _results = [];
      for (k in params_to_sign) {
        v = params_to_sign[k];
        if (v) {
          _results.push("" + k + "=" + (build_array(v).join(",")));
        }
      }
      return _results;
    })(), _.identity).join("&");
    return sha1.hex_sha1(to_sign + api_secret);
  };

  build_eager = function(transformations) {
    var transformation;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = build_array(transformations);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        transformation = _ref[_i];
        transformation = _.clone(transformation);
        _results.push(_.filter([generate_transformation_string(transformation), transformation.format], present).join("/"));
      }
      return _results;
    })()).join("|");
  };

  build_custom_headers = function(headers) {
    var k, v;
    if (headers == null) {
      return void 0;
    } else if (_.isArray(headers)) {

    } else if (_.isObject(headers)) {
      headers = [
        (function() {
          var _results;
          _results = [];
          for (k in headers) {
            v = headers[k];
            _results.push(k + ": " + v);
          }
          return _results;
        })()
      ];
    } else {
      return headers;
    }
    return headers.join("\n");
  };

  build_upload_params = function(options) {
    var params;
    if (options == null) {
      options = {};
    }
    params = {
      timestamp: timestamp(),
      transformation: generate_transformation_string(options),
      public_id: options.public_id,
      callback: options.callback,
      format: options.format,
      backup: options.backup,
      faces: options.faces,
      exif: options.exif,
      image_metadata: options.image_metadata,
      colors: options.colors,
      type: options.type,
      eager: build_eager(options.eager),
      headers: build_custom_headers(options.headers),
      use_filename: options.use_filename,
      notification_url: options.notification_url,
      eager_notification_url: options.eager_notification_url,
      eager_async: options.eager_async,
      invalidate: options.invalidate,
      tags: options.tags && build_array(options.tags).join(",")
    };
    return params;
  };

  timestamp = function() {
    return Math.floor(new Date().getTime() / 1000);
  };

  option_consume = function(options, option_name, default_value) {
    var result;
    result = options[option_name];
    delete options[option_name];
    if (result != null) {
      return result;
    } else {
      return default_value;
    }
  };

  build_array = function(arg) {
    if (arg == null) {
      return [];
    } else if (_.isArray(arg)) {
      return arg;
    } else {
      return [arg];
    }
  };

  exports.present = present = function(value) {
    return !_.isUndefined(value) && ("" + value).length > 0;
  };

  generate_transformation_string = function(options) {
    var angle, background, base_transformation, base_transformations, border, crop, effect, flags, has_layer, height, key, named_transformation, no_html_sizes, param, params, result, short, simple_params, size, transformation, value, width, _ref, _ref1, _ref2, _ref3;
    if (_.isArray(options)) {
      result = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = options.length; _i < _len; _i++) {
          base_transformation = options[_i];
          _results.push(generate_transformation_string(_.clone(base_transformation)));
        }
        return _results;
      })();
      return result.join("/");
    }
    width = options["width"];
    height = options["height"];
    size = option_consume(options, "size");
    if (size) {
      _ref1 = (_ref = size.split("x"), width = _ref[0], height = _ref[1], _ref), options["width"] = _ref1[0], options["height"] = _ref1[1];
    }
    has_layer = options.overlay || options.underlay;
    crop = option_consume(options, "crop");
    angle = build_array(option_consume(options, "angle")).join(".");
    no_html_sizes = has_layer || present(angle) || crop === "fit" || crop === "limit";
    if (width && (no_html_sizes || parseFloat(width) < 1)) {
      delete options["width"];
    }
    if (height && (no_html_sizes || parseFloat(height) < 1)) {
      delete options["height"];
    }
    background = option_consume(options, "background");
    background = background && background.replace(/^#/, "rgb:");
    base_transformations = build_array(option_consume(options, "transformation", []));
    named_transformation = [];
    if (_.filter(base_transformations, _.isObject).length > 0) {
      base_transformations = _.map(base_transformations, function(base_transformation) {
        if (_.isObject(base_transformation)) {
          return generate_transformation_string(_.clone(base_transformation));
        } else {
          return generate_transformation_string({
            transformation: base_transformation
          });
        }
      });
    } else {
      named_transformation = base_transformations.join(".");
      base_transformations = [];
    }
    effect = option_consume(options, "effect");
    if (_.isArray(effect)) {
      effect = effect.join(":");
    }
    border = option_consume(options, "border");
    if (_.isObject(border)) {
      border = "" + ((_ref2 = border.width) != null ? _ref2 : 2) + "px_solid_" + (((_ref3 = border.color) != null ? _ref3 : "black").replace(/^#/, 'rgb:'));
    }
    flags = build_array(option_consume(options, "flags")).join(".");
    params = {
      c: crop,
      t: named_transformation,
      w: width,
      h: height,
      b: background,
      e: effect,
      a: angle,
      bo: border,
      fl: flags
    };
    simple_params = {
      x: "x",
      y: "y",
      radius: "r",
      gravity: "g",
      quality: "q",
      prefix: "p",
      default_image: "d",
      underlay: "u",
      overlay: "l",
      fetch_format: "f",
      density: "dn",
      page: "pg",
      color_space: "cs",
      delay: "dl",
      opacity: "o"
    };
    for (param in simple_params) {
      short = simple_params[param];
      params[short] = option_consume(options, param);
    }
    params = _.sortBy((function() {
      var _results;
      _results = [];
      for (key in params) {
        value = params[key];
        _results.push([key, value]);
      }
      return _results;
    })(), function(key, value) {
      return key;
    });
    params.push([option_consume(options, "raw_transformation")]);
    transformation = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        if (present(_.last(param))) {
          _results.push(param.join("_"));
        }
      }
      return _results;
    })()).join(",");
    base_transformations.push(transformation);
    return _.filter(base_transformations, present).join("/");
  };

}).call(this);
