// Generated by CoffeeScript 1.6.3
(function() {
  var GLOBAL, _;

  GLOBAL = Parse.Cloudinary != null ? Parse.Cloudinary : Parse.Cloudinary = {};

  GLOBAL.get_cloudinary_path = function() {
    var cloudinary_path, e, prefices, prefix, require_test_file, _i, _len;
    if (GLOBAL.PREFIX != null) {
      return GLOBAL.PREFIX;
    }
    prefices = ['cloud', ''];
    cloudinary_path = "cloudinary";
    require_test_file = "version";
    for (_i = 0, _len = prefices.length; _i < _len; _i++) {
      prefix = prefices[_i];
      try {
        require([prefix, cloudinary_path, require_test_file].join("/"));
        GLOBAL.PREFIX = [prefix, cloudinary_path, ""].join("/");
        console.log("Cloudinary prefix: " + GLOBAL.PREFIX);
        return GLOBAL.PREFIX;
      } catch (_error) {
        e = _error;
        if (!e.message.match(/Module \S+ not found/)) {
          throw e;
        }
      }
    }
    throw new Error("Couldn't find cloudinary in: " + prefices.join(", "));
  };

  GLOBAL.require = function(file) {
    var path;
    path = GLOBAL.get_cloudinary_path();
    return require(path + file);
  };

  _ = GLOBAL.require('lib/underscore.js');

  _.extend(exports, GLOBAL.require('sign.js'));

  exports.config = GLOBAL.require('config.js');

  exports.initialize = function(cloud_name, api_key, api_secret) {
    return exports.config({
      cloud_name: cloud_name,
      api_key: api_key,
      api_secret: api_secret
    });
  };

  exports.version = Parse.Cloudinary.VERSION;

  /*
    This factory creates a beforeSave filter that verifies that a given
    cloudinary-identifier field in your object is a valid (has correct signature)
  
    @note This function allows changing of other fields without validation
  */


  exports.beforeSaveFactory = function(object_name, field_name) {
    return Parse.Cloud.beforeSave(object_name, function(request, response) {
      var identifier, verify_upload;
      verify_upload = function(previous_value) {
        if (identifier === previous_value || exports.verify_upload(identifier)) {
          request.object.set(field_name, exports.remove_signature(identifier));
          return response.success();
        } else {
          return response.error("Bad signature");
        }
      };
      identifier = request.object.get(field_name);
      return (new Parse.Query(object_name)).get(request.object.id, {
        success: function(previous) {
          return verify_upload(previous.get(field_name));
        },
        error: function(object, error) {
          if (error.code === Parse.Error.OBJECT_NOT_FOUND) {
            return verify_upload(new Parse.Object);
          }
          return response.error(error);
        }
      });
    });
  };

}).call(this);
